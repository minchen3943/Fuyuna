# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  """管理员ID"""
  adminId: Int!

  """管理员名称"""
  adminName: String!

  """管理员密码哈希"""
  adminPasswordHash: String!

  """创建时间"""
  createdAt: DateTime!

  """是否激活"""
  isActive: Boolean!

  """更新时间"""
  updatedAt: DateTime!
}

type AdminResult {
  code: Int!
  data: [Admin!]
  message: String!
}

type Article {
  article_bucket_name: String!
  article_bucket_region: String!
  article_id: ID!
  article_key: String!
  article_name: String!
  article_status: Int!
  article_title: String!
  article_view_count: Int!
  created_at: DateTime
  updated_at: DateTime
}

type ArticleResult {
  code: Int!
  data: [Article!]
  message: String!
}

"""文章状态枚举"""
enum ArticleStatus {
  Hidden
  Public
  Reviewing
}

type Comment {
  commentContent: String!
  commentEmail: String
  commentId: ID!
  commentIp: String!
  commentStatus: Int!
  commentUserName: String!
  created_at: DateTime
  updated_at: DateTime
}

type CommentResult {
  code: Int!
  data: [Comment!]
  message: String!
}

"""评论状态枚举"""
enum CommentStatus {
  Abnormal
  Approved
  Pending
}

input CreateAdminInput {
  adminName: String!
  adminPassword: String!
}

input CreateArticleInput {
  article_bucket_name: String!
  article_bucket_region: String!
  article_key: String!
  article_name: String!
  article_title: String!
}

input CreateCommentInput {
  commentContent: String!
  commentEmail: String
  commentIp: String!
  commentUserName: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginAdminInput {
  adminName: String!
  adminPassword: String!
}

type Mutation {
  checkAdminPassWord(data: LoginAdminInput!): AdminResult!
  createAdmin(data: CreateAdminInput!): AdminResult!
  createArticle(input: CreateArticleInput!): ArticleResult!
  createComment(input: CreateCommentInput!): CommentResult!
  deleteAdmin(adminId: Int!): AdminResult!
  deleteArticle(article_id: Int!): ArticleResult!
  deleteComment(comment_id: Int!): CommentResult!
  updateAdmin(data: UpdateAdminInput!): AdminResult!
  updateAdminStatus(adminId: Int!, isActive: Boolean!): AdminResult!
  updateArticle(input: UpdateArticleInput!): ArticleResult!
  updateArticleStatus(article_id: Int!, article_status: Int!): ArticleResult!
  updateComment(input: UpdateCommentInput!): CommentResult!
  updateCommentStatus(comment_id: Int!, comment_status: Int!): CommentResult!
}

type Query {
  findAdminById(id: Int!): AdminResult
  findAllAdmin: AdminResult!
  findAllArticle: ArticleResult!
  findAllComment: CommentResult!
  findArticleById(id: Int!): ArticleResult
  findArticleByPage(page: Int!, pageSize: Int!): ArticleResult!
  findCommentById(id: Int!): CommentResult
  findCommentByPage(page: Int!, pageSize: Int!): CommentResult!
  getArticleTotalPages(pageSize: Int!): TotalPages!
  getCommentTotalPages(pageSize: Int!): TotalPagesOutput!
}

type TotalPages {
  code: Int!
  data: Int
  message: String!
}

type TotalPagesOutput {
  code: Int!
  data: Int
  message: String!
}

input UpdateAdminInput {
  adminId: Int!
  adminName: String
  adminPassword: String
  isActive: Boolean
}

input UpdateArticleInput {
  article_bucket_name: String
  article_bucket_region: String
  article_id: Int!
  article_key: String
  article_name: String
  article_status: ArticleStatus
  article_title: String
}

input UpdateCommentInput {
  commentContent: String
  commentEmail: String
  commentId: Float!
  commentIp: String
  commentStatus: CommentStatus
  commentUserName: String
}